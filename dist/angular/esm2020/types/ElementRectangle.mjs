export class ElementRectangleImpl {
    constructor(rectangle) {
        this.x = rectangle.x;
        this.y = rectangle.y;
        this.left = rectangle.left;
        this.right = rectangle.right;
        this.bottom = rectangle.bottom;
        this.top = rectangle.top;
        this.element = rectangle.element;
        this.width = rectangle.width;
        this.height = rectangle.height;
        this.center = rectangle.center;
    }
    nearPlumbLineIsBetter(rect, targetRect) {
        let distance;
        if (rect.center.x < targetRect.center.x) {
            distance = targetRect.center.x - rect.right;
        }
        else {
            distance = rect.left - targetRect.center.x;
        }
        return distance < 0 ? 0 : distance;
    }
    nearHorizonIsBetter(rect, targetRect) {
        let distance;
        if (rect.center.y < targetRect.center.y) {
            distance = targetRect.center.y - rect.bottom;
        }
        else {
            distance = rect.top - targetRect.center.y;
        }
        return distance < 0 ? 0 : distance;
    }
    nearTargetLeftIsBetter(rect, targetRect) {
        let distance;
        if (rect.center.x < targetRect.center.x) {
            distance = targetRect.left - rect.right;
        }
        else {
            distance = rect.left - targetRect.left;
        }
        return distance < 0 ? 0 : distance;
    }
    nearTargetTopIsBetter(rect, targetRect) {
        let distance;
        if (rect.center.y < targetRect.center.y) {
            distance = targetRect.top - rect.bottom;
        }
        else {
            distance = rect.top - targetRect.top;
        }
        return distance < 0 ? 0 : distance;
    }
    topIsBetter(rect) {
        return rect.top;
    }
    bottomIsBetter(rect) {
        return -1 * rect.bottom;
    }
    leftIsBetter(rect) {
        return rect.left;
    }
    rightIsBetter(rect) {
        return -1 * rect.right;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxlbWVudFJlY3RhbmdsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90eXBlcy9FbGVtZW50UmVjdGFuZ2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxNQUFNLE9BQU8sb0JBQW9CO0lBWS9CLFlBQWEsU0FBMkI7UUFDdEMsSUFBSSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxxQkFBcUIsQ0FBRSxJQUFzQixFQUFFLFVBQTRCO1FBQ2hGLElBQUksUUFBZ0IsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLFFBQVEsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQzdDO2FBQU07WUFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztJQUVNLG1CQUFtQixDQUFFLElBQXNCLEVBQUUsVUFBNEI7UUFDOUUsSUFBSSxRQUFnQixDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7WUFDdkMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDOUM7YUFBTTtZQUNMLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDO0lBRU0sc0JBQXNCLENBQUUsSUFBc0IsRUFBRSxVQUE0QjtRQUNqRixJQUFJLFFBQWdCLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtZQUN2QyxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3pDO2FBQU07WUFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDO0lBRU0scUJBQXFCLENBQUUsSUFBc0IsRUFBRSxVQUE0QjtRQUNoRixJQUFJLFFBQWdCLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtZQUN2QyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3pDO2FBQU07WUFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDO0lBRU0sV0FBVyxDQUFFLElBQXNCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRU0sY0FBYyxDQUFFLElBQXNCO1FBQzNDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRU0sWUFBWSxDQUFFLElBQXNCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRU0sYUFBYSxDQUFFLElBQXNCO1FBQzFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFJlY3RhbmdsZSB7XG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICBsZWZ0OiBudW1iZXIsXG4gIHRvcDogbnVtYmVyLFxuICByaWdodDogbnVtYmVyLFxuICBib3R0b206IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50UmVjdGFuZ2xlIGV4dGVuZHMgUmVjdGFuZ2xlIHtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnRcblxuICBjZW50ZXI6IFJlY3RhbmdsZVxufVxuXG5leHBvcnQgY2xhc3MgRWxlbWVudFJlY3RhbmdsZUltcGwgaW1wbGVtZW50cyBFbGVtZW50UmVjdGFuZ2xlIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIGxlZnQ6IG51bWJlcjtcbiAgdG9wOiBudW1iZXI7XG4gIHJpZ2h0OiBudW1iZXI7XG4gIGJvdHRvbTogbnVtYmVyO1xuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgY2VudGVyOiBSZWN0YW5nbGU7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yIChyZWN0YW5nbGU6IEVsZW1lbnRSZWN0YW5nbGUpIHtcbiAgICB0aGlzLnggPSByZWN0YW5nbGUueDtcbiAgICB0aGlzLnkgPSByZWN0YW5nbGUueTtcbiAgICB0aGlzLmxlZnQgPSByZWN0YW5nbGUubGVmdDtcbiAgICB0aGlzLnJpZ2h0ID0gcmVjdGFuZ2xlLnJpZ2h0O1xuICAgIHRoaXMuYm90dG9tID0gcmVjdGFuZ2xlLmJvdHRvbTtcbiAgICB0aGlzLnRvcCA9IHJlY3RhbmdsZS50b3A7XG4gICAgdGhpcy5lbGVtZW50ID0gcmVjdGFuZ2xlLmVsZW1lbnQ7XG4gICAgdGhpcy53aWR0aCA9IHJlY3RhbmdsZS53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHJlY3RhbmdsZS5oZWlnaHQ7XG4gICAgdGhpcy5jZW50ZXIgPSByZWN0YW5nbGUuY2VudGVyO1xuICB9XG5cbiAgcHVibGljIG5lYXJQbHVtYkxpbmVJc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSwgdGFyZ2V0UmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgbGV0IGRpc3RhbmNlOiBudW1iZXI7XG4gICAgaWYgKHJlY3QuY2VudGVyLnggPCB0YXJnZXRSZWN0LmNlbnRlci54KSB7XG4gICAgICBkaXN0YW5jZSA9IHRhcmdldFJlY3QuY2VudGVyLnggLSByZWN0LnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXN0YW5jZSA9IHJlY3QubGVmdCAtIHRhcmdldFJlY3QuY2VudGVyLng7XG4gICAgfVxuICAgIHJldHVybiBkaXN0YW5jZSA8IDAgPyAwIDogZGlzdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgbmVhckhvcml6b25Jc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSwgdGFyZ2V0UmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgbGV0IGRpc3RhbmNlOiBudW1iZXI7XG4gICAgaWYgKHJlY3QuY2VudGVyLnkgPCB0YXJnZXRSZWN0LmNlbnRlci55KSB7XG4gICAgICBkaXN0YW5jZSA9IHRhcmdldFJlY3QuY2VudGVyLnkgLSByZWN0LmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzdGFuY2UgPSByZWN0LnRvcCAtIHRhcmdldFJlY3QuY2VudGVyLnk7XG4gICAgfVxuICAgIHJldHVybiBkaXN0YW5jZSA8IDAgPyAwIDogZGlzdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgbmVhclRhcmdldExlZnRJc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSwgdGFyZ2V0UmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgbGV0IGRpc3RhbmNlOiBudW1iZXI7XG4gICAgaWYgKHJlY3QuY2VudGVyLnggPCB0YXJnZXRSZWN0LmNlbnRlci54KSB7XG4gICAgICBkaXN0YW5jZSA9IHRhcmdldFJlY3QubGVmdCAtIHJlY3QucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc3RhbmNlID0gcmVjdC5sZWZ0IC0gdGFyZ2V0UmVjdC5sZWZ0O1xuICAgIH1cbiAgICByZXR1cm4gZGlzdGFuY2UgPCAwID8gMCA6IGRpc3RhbmNlO1xuICB9XG5cbiAgcHVibGljIG5lYXJUYXJnZXRUb3BJc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSwgdGFyZ2V0UmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgbGV0IGRpc3RhbmNlOiBudW1iZXI7XG4gICAgaWYgKHJlY3QuY2VudGVyLnkgPCB0YXJnZXRSZWN0LmNlbnRlci55KSB7XG4gICAgICBkaXN0YW5jZSA9IHRhcmdldFJlY3QudG9wIC0gcmVjdC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc3RhbmNlID0gcmVjdC50b3AgLSB0YXJnZXRSZWN0LnRvcDtcbiAgICB9XG4gICAgcmV0dXJuIGRpc3RhbmNlIDwgMCA/IDAgOiBkaXN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyB0b3BJc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHJlY3QudG9wO1xuICB9XG5cbiAgcHVibGljIGJvdHRvbUlzQmV0dGVyIChyZWN0OiBFbGVtZW50UmVjdGFuZ2xlKTogbnVtYmVyIHtcbiAgICByZXR1cm4gLTEgKiByZWN0LmJvdHRvbTtcbiAgfVxuXG4gIHB1YmxpYyBsZWZ0SXNCZXR0ZXIgKHJlY3Q6IEVsZW1lbnRSZWN0YW5nbGUpOiBudW1iZXIge1xuICAgIHJldHVybiByZWN0LmxlZnQ7XG4gIH1cblxuICBwdWJsaWMgcmlnaHRJc0JldHRlciAocmVjdDogRWxlbWVudFJlY3RhbmdsZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xICogcmVjdC5yaWdodDtcbiAgfVxufVxuIl19